// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Swallow.Data;

#nullable disable

namespace Swallow.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AttractionsToCategories", b =>
                {
                    b.Property<int>("AttractionCategoriesAttractionCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("AttractionsAttractionId")
                        .HasColumnType("int");

                    b.HasKey("AttractionCategoriesAttractionCategoryId", "AttractionsAttractionId");

                    b.HasIndex("AttractionsAttractionId");

                    b.ToTable("AttractionsToCategories");
                });

            modelBuilder.Entity("Swallow.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdminId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Swallow.Models.Attraction", b =>
                {
                    b.Property<int>("AttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttractionId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<short?>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoogleMapsURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GooglePlaceId")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PictureURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TripAdvisorURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("AttractionId");

                    b.HasIndex("CityId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("Swallow.Models.AttractionCategory", b =>
                {
                    b.Property<int>("AttractionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttractionCategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttractionCategoryId");

                    b.ToTable("AttractionCategories");
                });

            modelBuilder.Entity("Swallow.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<short>("CountryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(10, 6)
                        .HasColumnType("decimal(10,6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Swallow.Models.Country", b =>
                {
                    b.Property<short>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CountryId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISO2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISO3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Swallow.Models.Currency", b =>
                {
                    b.Property<short>("CurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("CurrencyId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<short?>("CountryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CountryId");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Swallow.Models.CurrencyRate", b =>
                {
                    b.Property<int>("CurrencyRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrencyRateId"));

                    b.Property<short>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RateToUSD")
                        .HasPrecision(12, 6)
                        .HasColumnType("decimal(12,6)");

                    b.HasKey("CurrencyRateId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CurrencyRates");
                });

            modelBuilder.Entity("Swallow.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<string>("AttachmentURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ExpenseCategoryId")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("TripId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Swallow.Models.ExpenseCategory", b =>
                {
                    b.Property<short>("ExpenseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("ExpenseCategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExpenseCategoryId");

                    b.ToTable("ExpenseCategories");
                });

            modelBuilder.Entity("Swallow.Models.ItineraryAttraction", b =>
                {
                    b.Property<int>("ItineraryAttractionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryAttractionId"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.Property<short?>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("ItineraryDayId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TicketsURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ItineraryAttractionId");

                    b.HasIndex("AttractionId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ItineraryDayId");

                    b.ToTable("ItineraryAttractions");
                });

            modelBuilder.Entity("Swallow.Models.ItineraryDay", b =>
                {
                    b.Property<int>("ItineraryDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItineraryDayId"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.HasKey("ItineraryDayId");

                    b.HasIndex("TripId");

                    b.ToTable("ItineraryDays");
                });

            modelBuilder.Entity("Swallow.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<bool>("Ads")
                        .HasColumnType("bit");

                    b.Property<bool>("ChatbotAccess")
                        .HasColumnType("bit");

                    b.Property<int>("MaxAttractions")
                        .HasColumnType("int");

                    b.Property<int>("MaxTripDays")
                        .HasColumnType("int");

                    b.Property<int>("MaxTrips")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PersonalizeItinerary")
                        .HasColumnType("bit");

                    b.Property<bool>("PhoneAccess")
                        .HasColumnType("bit");

                    b.Property<bool>("TripTips")
                        .HasColumnType("bit");

                    b.HasKey("PlanId");

                    b.ToTable("Plan");
                });

            modelBuilder.Entity("Swallow.Models.PlatformSettings", b =>
                {
                    b.Property<byte>("SettingsId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("MentenanceMode")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NextCurrencyUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("SettingsId");

                    b.ToTable("PlatformSettings");

                    b.HasData(
                        new
                        {
                            SettingsId = (byte)1,
                            MentenanceMode = false,
                            NextCurrencyUpdate = new DateTime(2023, 10, 25, 12, 1, 27, 688, DateTimeKind.Utc).AddTicks(7551)
                        });
                });

            modelBuilder.Entity("Swallow.Models.Schedule", b =>
                {
                    b.Property<int>("AttractionId")
                        .HasColumnType("int");

                    b.Property<byte>("WeekdayId")
                        .HasColumnType("tinyint");

                    b.Property<TimeOnly?>("CloseTime")
                        .HasColumnType("time");

                    b.Property<TimeOnly?>("OpenTime")
                        .HasColumnType("time");

                    b.HasKey("AttractionId", "WeekdayId");

                    b.HasIndex("WeekdayId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Swallow.Models.TransportMode", b =>
                {
                    b.Property<byte>("TransportModeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransportModeId");

                    b.ToTable("TransportModes");
                });

            modelBuilder.Entity("Swallow.Models.Trip", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TripId");

                    b.HasIndex("UserId");

                    b.ToTable("Trips");
                });

            modelBuilder.Entity("Swallow.Models.TripTransport", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<byte>("TransportModeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<short?>("CurrencyId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("TicketsURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TransportNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TripId", "TransportModeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("TransportModeId");

                    b.ToTable("TripTransports");
                });

            modelBuilder.Entity("Swallow.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePictureURL")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Swallow.Models.UserPlan", b =>
                {
                    b.Property<int>("UserPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPlanId"));

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TripCount")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPlanId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlan");
                });

            modelBuilder.Entity("Swallow.Models.Weekday", b =>
                {
                    b.Property<byte>("WeekdayId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("WeekdayId");

                    b.ToTable("Weekdays");
                });

            modelBuilder.Entity("AttractionsToCategories", b =>
                {
                    b.HasOne("Swallow.Models.AttractionCategory", null)
                        .WithMany()
                        .HasForeignKey("AttractionCategoriesAttractionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swallow.Models.Attraction", null)
                        .WithMany()
                        .HasForeignKey("AttractionsAttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Swallow.Models.Attraction", b =>
                {
                    b.HasOne("Swallow.Models.City", "City")
                        .WithMany("Attractions")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swallow.Models.Currency", "Currency")
                        .WithMany("Attractions")
                        .HasForeignKey("CurrencyId");

                    b.Navigation("City");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Swallow.Models.City", b =>
                {
                    b.HasOne("Swallow.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Swallow.Models.Currency", b =>
                {
                    b.HasOne("Swallow.Models.Country", "Country")
                        .WithMany("Currencies")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Swallow.Models.CurrencyRate", b =>
                {
                    b.HasOne("Swallow.Models.Currency", "Currency")
                        .WithMany("CurrencyRates")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("Swallow.Models.Expense", b =>
                {
                    b.HasOne("Swallow.Models.Currency", "Currency")
                        .WithMany("Expenses")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Swallow.Models.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swallow.Models.Trip", "Trip")
                        .WithMany("Expenses")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("ExpenseCategory");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Swallow.Models.ItineraryAttraction", b =>
                {
                    b.HasOne("Swallow.Models.Attraction", "Attraction")
                        .WithMany("ItineraryAttractions")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swallow.Models.Currency", "Currency")
                        .WithMany("ItineraryAttractions")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Swallow.Models.ItineraryDay", "ItineraryDay")
                        .WithMany("ItineraryAttractions")
                        .HasForeignKey("ItineraryDayId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Currency");

                    b.Navigation("ItineraryDay");
                });

            modelBuilder.Entity("Swallow.Models.ItineraryDay", b =>
                {
                    b.HasOne("Swallow.Models.Trip", "Trip")
                        .WithMany("ItineraryDays")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Swallow.Models.Schedule", b =>
                {
                    b.HasOne("Swallow.Models.Attraction", "Attraction")
                        .WithMany("Schedules")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swallow.Models.Weekday", "Weekday")
                        .WithMany("Schedules")
                        .HasForeignKey("WeekdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Weekday");
                });

            modelBuilder.Entity("Swallow.Models.Trip", b =>
                {
                    b.HasOne("Swallow.Models.City", "City")
                        .WithMany("Trips")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swallow.Models.User", "User")
                        .WithMany("Trips")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swallow.Models.TripTransport", b =>
                {
                    b.HasOne("Swallow.Models.Currency", "Currency")
                        .WithMany("TripTransports")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("Swallow.Models.TransportMode", "TransportMode")
                        .WithMany("TripTransports")
                        .HasForeignKey("TransportModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swallow.Models.Trip", "Trip")
                        .WithMany("TripTransports")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("TransportMode");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("Swallow.Models.UserPlan", b =>
                {
                    b.HasOne("Swallow.Models.Plan", "Plan")
                        .WithMany("UserPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Swallow.Models.User", "User")
                        .WithMany("UserPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Swallow.Models.Attraction", b =>
                {
                    b.Navigation("ItineraryAttractions");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Swallow.Models.City", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("Trips");
                });

            modelBuilder.Entity("Swallow.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("Swallow.Models.Currency", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("CurrencyRates");

                    b.Navigation("Expenses");

                    b.Navigation("ItineraryAttractions");

                    b.Navigation("TripTransports");
                });

            modelBuilder.Entity("Swallow.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Swallow.Models.ItineraryDay", b =>
                {
                    b.Navigation("ItineraryAttractions");
                });

            modelBuilder.Entity("Swallow.Models.Plan", b =>
                {
                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("Swallow.Models.TransportMode", b =>
                {
                    b.Navigation("TripTransports");
                });

            modelBuilder.Entity("Swallow.Models.Trip", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("ItineraryDays");

                    b.Navigation("TripTransports");
                });

            modelBuilder.Entity("Swallow.Models.User", b =>
                {
                    b.Navigation("Trips");

                    b.Navigation("UserPlans");
                });

            modelBuilder.Entity("Swallow.Models.Weekday", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
